回顾JavaScript第四天内容:
 * 函数
   * 概念
     * 函数 - 只定义一次，而可以调用多次
     * 作用 - 主要完成某些特定的功能或目的
   * 函数的定义
     * 函数声明方式
       function 函数名(形参){
           函数体 - 语句块
       }
     * 字面量方式 - 类似于变量定义
       var 函数名 = function(){
           函数体
       }
     * 函数与变量的关系
       * 声明方式定义的函数与变量同名时 - 变量可以正常使用，但函数不能
       * 字面量方式定义的函数与变量同名时 - 变量不能正常使用，但函数可以
   * 函数的调用 - 函数名()
   * 函数的参数
     * 形参 - 函数定义使用的参数
       * 接收实参的值，允许在函数体中使用
     * 实参 - 函数调用使用的参数
     * 形参与实参的个数
       * 形参的个数多于实参的个数 - 多余的形参的值为 undefined
       * 实参的个数多于形参的个数 - 多余的实参的值接收不到
       * arguments 对象用于接收实参(替代形参)
   * return 语句
     return 语句并不是必需的
     * return 语句的默认返回值为 undefined
 * 作用域
   * 分类
     * 全局作用域 - 表示当前的页面环境
     * 函数作用域 - 表示具体的某个函数内
   * 变量的作用域
     * 全局变量 - 在全局作用域和函数作用域中都可以访问的
     * 局部变量 - 只能在当前的函数作用域中才能访问
     * 特殊的情况
       * 声明提前 - 先调用变量，再定义变量
       * 按值传递 - 将全局变量复制一份给某个函数
今天的内容:
 * 函数的作用域
   * 全局函数 - 定义在全局作用域的
   * 内部(私有)函数 - 定义在函数作用域的
 * 所谓函数作用域中的局部变量或内部函数 - 私有
 * 特殊函数
   * 匿名函数 - 没有名的函数
     * 注意 - 语法不允许的
   * 自调函数 - 自己调用自己的函数(只能调用一次)
     * 特点 - 只需要定义即可(定义即调用)
     * 语法结构
       * 第一个小括号 - 用于定义函数
       * 第二个小括号 - 用于调用函数
     * 作用 - 用于优化所有全局变量和函数
   * 回调函数
     * 概念 - 作为另一个函数的参数的函数
   * 内部函数 - 在一个函数中定义另一个函数
   * 作为值的函数
     * 作用 - 在全局作用域中直接调用内部函数
 * 对象
   * 对象 - 万物皆对象
     * 概念 - 对象，我们对物品的解析方式
       * 属性 - 用于描述该对象的信息
       * 方法 - 用于描述该对象的行为
     * 分类
       * 内置对象/原生对象 - ECMAScript提供的预定义对象(String\Number等)
       * 宿主对象 - 由浏览器环境所提供的对象(DOM和BOM)
       * 自定义对象 - 由开发人员创建的对象
   * 创建对象
     * 初始化器方式
       var 对象名 = {
           属性名 : 属性值,
           方法名 : function(){
               方法体
           }
       }
     * 构造函数方式
       var 对象名 = new Object();
       * new - 关键字，表示创建一个新的对象
       * Object - 在JavaScript中是对象的祖先
       为该对象设置属性和方法
       * 设置属性 - 对象名.属性名 = 属性值;
       * 设置方法 - 对象名.方法名 = function(){}
     * Object.create()方式
       * 必须提前存在一个对象
       * 创建的新对象具有与传递的对象相同的属性和方法
       * 创建一个空对象
         var 对象名 = Object.create(null);
   * 使用对象
     * 使用方式一
       * 对象名.属性名
       * 对象名.方法名()
       * 注意 - 不适用于复杂的命名方式
     * 使用方式二 - 用法更通用
       * 对象名['属性名']
       * 对象名['方法名']()
       * 注意 - 适用于复杂的命名方式
   * 操作对象的属性和方法
     * 新增对象的属性和方法
       * 对象名.新的属性名 = 属性值;
       * 对象名.新的方法名 = function(){}
     * 修改对象的属性和方法
       * 对象名.原有属性名 = 新的属性值;
       * 对象名.原有方法名 = function(){}
     * 删除对象的属性和方法
       * delete 对象名.属性名
       * delete 对象名.方法名
   * 