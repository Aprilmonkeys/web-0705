回顾JavaScript第三天内容:
 * 运算符
   * 条件运算符
     * 语法格式 - 条件表达式 ? true : false
     * 允许嵌套
       * 如果嵌套的层级过多时 - 性能下降、可读性降低
   * 运算符的优先级别
     * 常见的优先级别
     * ()的级别是最高的
 * 语句
   * 概念
     * 语句 - 只要出现分号(结束符)表示一条语句的结束
     * 语句块 - 包含了一条或多条语句
       * 利用"{}"将语句进行包裹
     * 分类
       * 条件语句
       * 循环语句
       * 跳转语句
     * 执行流程
       * 顺序执行
       * 选择执行
       * 循环执行
   * 条件语句
     * if语句
       * if语句
         if (条件表达式) {
             语句块
         }
       * if..else语句
         if (条件表达式) {
             语句块A
         } else {
             语句块B
         }
       * else..if语句
         if (条件表达式1) {
             语句块A
         } else if (条件表达式2) {
             语句块B
         } else {
             语句块C
         }
       * if嵌套语句
     * switch..case语句
       switch (条件表达式) {
           case 值1:
                语句块;
                break;
           case 值2:
                语句块;
                break;
           ...
           default:
                语句块;
       }
       * switch语句被改写为if语句
   * 循环语句
     * while语句
       while (条件表达式) {
           语句块
       }
     * do..while语句
       do {
           语句块
       } while (条件表达式)
       * while语句与do..while语句的区别
         * while语句的语句块可能一次都不被执行 - 先判断，再执行
         * do..while语句的语句块至少要执行一次 - 先执行，再判断
     * for语句
       for (初始化表达式; 条件判断表达式; 循环控制表达式) {
           语句块
       }
       * 初始化表达式 - 定义用于控制循环的变量
       * 条件判断表达式 - 用于判断是否重复执行语句块
       * 循环控制表达式 - 用于修改控制循环的变量的值

       * for嵌套语句
今天的内容:
 * 跳转语句
   * break语句 - 表示中断
     * switch语句 - 语法要求
     * 循环语句中使用 - 表示结束循环
   * continue语句 - 表示连续
     * 循环语句中使用 - 表示结束本次循环
   * 注意 - break或continue不能应用在条件语句中
     * break可以用在switch语句中
 * 函数
   * 概念
     * 函数 - 定义一次，允许执行或调用多次
     * 作用 - 允许重复执行某段指定的语句块
     * 意义 - 完成或实现指定的要求或目的
     * 函数的定义
       function 函数名(){
           函数体 - 语句块
       }
     * 函数的调用 - 函数名()
   * 函数的定义
     * 函数声明式 - 就是函数定义的语法要求
       function 函数名(){
           函数体
       }
     * 字面量方式 - 类似于变量的定义方式
       var 函数名 = function(){
           函数体
       }
   * 函数的参数
     * 作用 - 实现调用函数时传递实际的值
     * 分类
       * 形参 - 函数的定义
         * 作用 - 接收实参的值，在函数体中使用
       * 实参 - 函数的调用
   * return语句
     function 函数名(形参){
         函数体;
         return 语句
     }
     函数名(实参);
     * 作用 - 将调用函数的计算结果进行返回
     * 注意 - return 语句并不是必需的
       * 默认没有 return 语句时 - undefined
   * 预定义函数
     * eval()函数
       * 作用 - 将一段JavaScript代码的字符串，进行转换并执行
       * 注意 - 具有安全问题
     * encodeURI()和decodeURI()
       * 概念
         * URL - 统一资源定位符
         * URI - 统一资源标识符
 * 作用域
   * 概念
     * 作用 - 作用域规定变量或函数的可被访问的范围和生命周期
     * 分类
       * 全局作用域 - 就是指当前整个页面环境
       * 函数作用域 - 就是指某个函数内部环境
   * 变量的作用域
     * 全局变量 - 定义在全局作用域中的变量
     * 局部变量 - 定义在函数作用域中的变量
   * 函数的作用域
     * 全局函数 - 定义在全局作用域的函数
     * 内部(私有)函数 - 定义在函数作用域的函数