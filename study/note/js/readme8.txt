回顾JavaScript第七天内容:
 * 数组
   * 概念
     * 定义 - 值的有序列表(集合)
       * 值 - 存储的数据
       * 有序 - 会按照一定的顺序进行排列
       * 列表 - 数组可以存储多个数据
   * 定义数组
     * 字面量方式
       var 数组名 = [value,value,...]
     * 构造函数方式
       var 数组名 = new Array(value,value,...)
       var 数组名 = new Array(length)
   * 数组分类
     * 索引数组 - 索引值是数字
       * 数字的索引值是从 0 开始的
     * 关联数组 - 索引值是字符
       * ECMA 官方规范中并没有提供这个概念
       * 在实际开发中，可以使用
       * JavaScript中的对象类似于关联数组
   * 操作数组的元素
     * 访问数组的元素 - 数组名[索引值]
     * 修改数组的元素 - 数组名[索引值] = 新的值
     * 删除数组的元素 - delete 数组名[索引值]
       * 注意 - 删除元素的值，但位置保留(undefined)
   * 稀疏数组
     * 定义 - 数组的长度大于数组中元素的个数
     * 数组中元素没有值的默认值为 undefined
   * 遍历数组
     * for语句 - 控制开始和结束的位置
     * for..in语句 - 只能从开始遍历到结束
 * 二维数组
   * 定义 - 就是数组的嵌套结构
   * 遍历 - for嵌套语句
 * 常见的方法
   * 进出栈方法 - push()和pop()
   * 操作方法 - splice()
   * 位置方法 - indexOf()和lastIndexOf()
今天的内容:
 * 正则表达式
   * 概念
     * 作用 - 定义一个特定的验证字符串内容规则的表达式
     * 注意 - 正则表达式并不是JavaScript独有的
       * JavaScript支持正则表达式
   * 定义正则表达式
     * 字面量方式
       var 正则表达式 = /表达式规则/修饰符
     * 构造函数方式
       var 正则表达式 = new RegExp(表达式规则,修饰符)
   * 正则表达式对象的验证方法
     * regExp.test(string) - 验证指定的字符串内容是否符合正则表达式的规则
   * 直接字符
     * [] - 表示字符集合，只要其中任意一个匹配就可以
     * [^] - 反向集合
     * \d - [0-9] -> 匹配单个数字
   * 重复 - 匹配指定字符出现的次数
     * {n,m} - 匹配前面的字符最少出现 n 次，最多出现 m 次
       n <= 次数 <= m
     * {n} - 匹配前面的字符出现 n 次
   * 直接量字符
     * \t - 水平制表符 -> TAB键
     * \n或\r - 换行符或回车符 -> ENTER键
   * 修饰符
     * i - 表示不区分大小写
     * g - 全局搜索
     * m - 多行搜索
 * 字符串的方法
   * 字符串使用正则表达式的方法
     * replace(regExp,replacement)方法
       * regExp - 一个正则表达式，匹配的内容是被替换的内容
       * replacement - 替换的内容
     * match(value/regExp)方法
       * 参数
         * value - 查找是否存在匹配的字符串内容
         * regExp - 利用正则表达式进行匹配
       * 返回值 - 是一个数组
     * search(regExp)方法
       * 参数 - 表示一个正则表达式
       * 返回值 - 匹配内容的索引值
         * 如果没有任何内容匹配的话，返回 -1
   * 