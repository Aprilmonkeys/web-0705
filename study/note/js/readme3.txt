	回顾JavaScript第二天内容:
 * 算数运算符
   * % 的用法
 * 自增或自减运算符
   * 自增 - 改变当前变量的值，每次加 1
     * 前置自增 - 先加 1，再返回值
     * 后置自增 - 先返回值，再加 1
   * 自减 - 每次减 1
 * 比较运算符
   * 相等与不等 - 只比较值
     * 相等 - ==
       '10' == 10 -> true
     * 不等 - !=
   * 全等与不全等 - 比较值和类型
     * 全等 - ===
     * 不全等 - !==
 * isNaN()方法
   * 作用 - 用来判断当前的值是否不是一个数字(NaN)
   * 原因 - NaN与自身是不等的
 * 逻辑运算符
   * 逻辑与 - &&
   * 逻辑或 - ||
   * 逻辑非 - !
   * 逻辑短路原则
 * 赋值运算符
   * 赋值运算符 -> =
   * 提供一些简写方式
     * 执行速度更快
 * 字符串连接符 - +
今天的内容:
 * 运算符
   * 命名方式
     * 一元运算符 - 只操作一个变量
     * 二元运算符 - 操作两个变量
     * 三元运算符 - 操作三个变量
   * 三元(条件)运算符 -> ?:
     判断表达式的结果 ? true : false
 * 语句
   * 概念
     * 语句 - 就是分号(;)代表一条语句的结束
     * 编写习惯
       * 一行只编写一条语句
       * 一行编写多条语句 - 代码可读性较差
     * 语句块 - 可以包含多条语句
       * 语法要求 - "{}"将多条语句包裹
     * 分类
       * 条件语句
       * 循环语句
       * 跳转语句
   * 条件语句
     * if 语句
       * if 语句
         if (表达式) {
             语句块
         }
       * if...else 语句
         if (表达式) {
             语句块A
         } else {
             语句块B
         }
       * else if 语句
         if (表达式1) {//true
             语句块A
         } else if (表达式2) {//true
             语句块B
         } else {//表达式2的结果为false
             语句块C
         }
     * switch...case 语句
       switch (表达式) {
           case 值1:
              语句块A
              break;
           case 值2:
              语句块B
              break;
           ...
           default:
              语句块N
       }
   * 循环语句
     * 概念
       * 通过一个条件控制是否重复执行某段指定语句块内容
     * while语句
       while (表达式) {
           语句块
       }
     * do...while语句
       do {
           语句块
       } while (表达式)
     * for语句
       for (初始化表达式; 条件判断表达式; 循环控制表达式) {
           语句块
       }
       * 初始化表达式 - 定义用于循环控制的变量内容
       * 条件判断表达式 - 用于决定是否重复执行指定语句块
       * 循环控制表达式 - 用于操作循环控制的变量的值
   * 